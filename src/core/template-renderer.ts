import * as fs from 'fs';
import * as path from 'path';
import { ComponentInfo, DocGeneratorConfig } from '../types';

export class TemplateRenderer {
  constructor(private config: DocGeneratorConfig) {}

  /**
   * Render component documentation using templates
   */
  async render(component: ComponentInfo): Promise<string> {
    switch (this.config.template) {
      case 'minimal':
        return this.renderMinimal(component);
      case 'detailed':
        return this.renderDetailed(component);
      default:
        return this.renderDefault(component);
    }
  }

  /**
   * Render default template
   */
  private renderDefault(component: ComponentInfo): string {
    return `# ${component.name}

${component.description ? `${component.description}\n` : ''}

## Component Information

- **Type**: ${component.type}
- **File**: \`${component.filePath}\`
- **SSR Support**: ${component.supportsSSR ? '✅ Yes' : '❌ No'}
- **Client-side**: ${component.supportsClient ? '✅ Yes' : '❌ No'}

${component.props && component.props.length > 0 ? `
## Props

| Name | Type | Required | Default | Description |
|------|------|----------|---------|-------------|
${component.props.map(prop => 
  `| ${prop.name} | \`${prop.type}\` | ${prop.required ? '✅' : '❌'} | ${prop.defaultValue || '-'} | ${prop.description || '-'} |`
).join('\n')}
` : ''}

${this.renderRenderingInfo(component)}

${component.examples && component.examples.length > 0 ? `
## Examples

${component.examples.map(example => `\`\`\`tsx\n${example}\n\`\`\``).join('\n\n')}
` : ''}

---

*Generated by doc-next-ssr*
`;
  }

  /**
   * Render minimal template
   */
  private renderMinimal(component: ComponentInfo): string {
    return `# ${component.name}

${component.description || 'No description available.'}

**File**: \`${component.filePath}\`

${component.props && component.props.length > 0 ? `
## Props

${component.props.map(prop => 
  `- **${prop.name}** (\`${prop.type}\`)${prop.required ? ' *required*' : ''}${prop.description ? ` - ${prop.description}` : ''}`
).join('\n')}
` : ''}
`;
  }

  /**
   * Render detailed template
   */
  private renderDetailed(component: ComponentInfo): string {
    return `# ${component.name}

${component.description ? `## Description\n\n${component.description}\n` : ''}

## Component Details

### Basic Information
- **Component Name**: ${component.name}
- **Component Type**: ${component.type}
- **Source File**: \`${component.filePath}\`

### Rendering Support
- **Server-Side Rendering (SSR)**: ${component.supportsSSR ? '✅ Supported' : '❌ Not supported'}
- **Client-Side Rendering**: ${component.supportsClient ? '✅ Supported' : '❌ Not supported'}

${this.renderRenderingInfo(component)}

${component.props && component.props.length > 0 ? `
## Props Interface

\`\`\`typescript
interface ${component.name}Props {
${component.props.map(prop => 
  `  ${prop.name}${prop.required ? '' : '?'}: ${prop.type};${prop.description ? ` // ${prop.description}` : ''}`
).join('\n')}
}
\`\`\`

### Props Details

${component.props.map(prop => `
#### ${prop.name}

- **Type**: \`${prop.type}\`
- **Required**: ${prop.required ? '✅ Yes' : '❌ No'}
${prop.defaultValue ? `- **Default**: \`${prop.defaultValue}\`` : ''}
${prop.description ? `- **Description**: ${prop.description}` : ''}
`).join('')}
` : ''}

${component.examples && component.examples.length > 0 ? `
## Usage Examples

${component.examples.map((example, index) => `
### Example ${index + 1}

\`\`\`tsx
${example}
\`\`\`
`).join('')}
` : ''}

## Integration Notes

${this.renderIntegrationNotes(component)}

---

*Documentation generated by doc-next-ssr*
`;
  }

  /**
   * Render rendering-specific information
   */
  private renderRenderingInfo(component: ComponentInfo): string {
    let info = '';

    if (this.config.includeSSR && component.supportsSSR) {
      info += `
## SSR Information

This component supports Server-Side Rendering and can be rendered on the server.

${component.type === 'page' ? `
### Data Fetching
- Can use \`getServerSideProps\` or \`getStaticProps\`
- Rendered on the server for each request (SSR) or at build time (SSG)
` : ''}
`;
    }

    if (this.config.includeClient && component.supportsClient) {
      info += `
## Client-Side Information

This component includes client-side functionality and requires hydration.

### Client Features
- Interactive elements that require JavaScript
- React hooks and state management
- Event handlers and user interactions
`;
    }

    return info;
  }

  /**
   * Render integration notes
   */
  private renderIntegrationNotes(component: ComponentInfo): string {
    const notes = [];

    if (component.supportsSSR && component.supportsClient) {
      notes.push('This component supports both SSR and client-side rendering, making it suitable for universal applications.');
    } else if (component.supportsSSR) {
      notes.push('This component is optimized for server-side rendering and static generation.');
    } else if (component.supportsClient) {
      notes.push('This component requires client-side JavaScript and should be used with dynamic imports if SSR compatibility is needed.');
    }

    if (component.type === 'page') {
      notes.push('This is a Next.js page component that will be automatically routed.');
    }

    return notes.length > 0 ? notes.map(note => `- ${note}`).join('\n') : '- No specific integration notes available.';
  }
}